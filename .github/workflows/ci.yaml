name: CI Workflow

on:
  push:
    branches:
      - main
  pull_request:

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
      # Checkout do código
      - name: Checkout code
        uses: actions/checkout@v3

      # Configuração do Node.js
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "18"

      # Instalar dependências do Node.js
      - name: Install dependencies
        run: npm install

      # Rodar testes do Node.js
      - name: Run Node.js tests
        run: npm test

  kubernetes-deployment:
    runs-on: ubuntu-latest
    needs: test  # Garante que o job de testes Node.js seja concluído antes do teste do Kubernetes

    steps:
      # Checkout do código novamente
      - name: Checkout code
        uses: actions/checkout@v3

      # Configuração do kubectl
      - name: Set up kubectl
        uses: azure/setup-kubectl@v1
        with:
          version: 'v1.24.0'

      # Autenticar no Kubernetes (usando kubeconfig ou token)
      - name: Authenticate to Kubernetes
        run: |
          echo "$KUBE_CONFIG" > kubeconfig.yaml
          kubectl --kubeconfig=kubeconfig.yaml config use-context <CLUSTER_CONTEXT>

      # Criar o Deployment do Nginx
      - name: Create Deployment
        run: |
          kubectl create deployment nginx --image=nginx --replicas=3

      # Verificar se os pods do Nginx estão rodando
      - name: Verify Pods are running
        run: |
          kubectl get pods
          kubectl rollout status deployment/nginx

      # Expor o serviço e verificar se está acessível (opcional)
      - name: Expose service and verify access
        run: |
          kubectl expose deployment nginx --type=LoadBalancer --name=nginx-service
          kubectl get svc nginx-service
          # Aqui você pode adicionar mais comandos de teste, como curl ou outros, para verificar o funcionamento do serviço

      # Limpeza do Kubernetes (opcional)
      - name: Cleanup
        run: kubectl delete deployment nginx
